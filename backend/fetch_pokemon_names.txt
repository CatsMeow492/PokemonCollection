package main

import (
    "encoding/json"
    "fmt"
    "io/ioutil"
    "net/http"
    "os"

    "github.com/joho/godotenv"
)

type Card struct {
    Name string `json:"name"`
}

type ApiResponse struct {
    Data []Card `json:"data"`
}

func fetchPokemonNames(apiKey string) ([]string, error) {
    url := "https://api.pokemontcg.io/v2/cards"
    req, _ := http.NewRequest("GET", url, nil)
    req.Header.Set("X-Api-Key", apiKey)

    client := &http.Client{}
    resp, err := client.Do(req)
    if err != nil {
        return nil, err
    }
    defer resp.Body.Close()

    if resp.StatusCode != http.StatusOK {
        return nil, fmt.Errorf("received non-200 response code: %d", resp.StatusCode)
    }

    var result ApiResponse
    if err := json.NewDecoder(resp.Body).Decode(&result); err != nil {
        return nil, err
    }

    names := make(map[string]struct{})
    for _, card := range result.Data {
        names[card.Name] = struct{}{}
    }

    uniqueNames := make([]string, 0, len(names))
    for name := range names {
        uniqueNames = append(uniqueNames, name)
    }

    return uniqueNames, nil
}

func writeNamesToFile(names []string, filename string) error {
    data, err := json.MarshalIndent(names, "", "  ")
    if err != nil {
        return err
    }
    return ioutil.WriteFile(filename, data, 0644)
}

func main() {
    // Load environment variables from .env file
    if err := godotenv.Load(); err != nil {
        fmt.Println("Error loading .env file")
        return
    }

    apiKey := os.Getenv("POKEMON_TCG_API_KEY")
    if apiKey == "" {
        fmt.Println("POKEMON_TCG_API_KEY environment variable is not set")
        return
    }

    names, err := fetchPokemonNames(apiKey)
    if err != nil {
        fmt.Printf("Error fetching Pokémon names: %v\n", err)
        return
    }

    filename := "pokemon_names.json"
    if err := writeNamesToFile(names, filename); err != nil {
        fmt.Printf("Error writing names to file: %v\n", err)
        return
    }

    fmt.Printf("Pokémon names have been written to %s\n", filename)
}
