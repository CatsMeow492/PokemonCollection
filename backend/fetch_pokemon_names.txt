package main

import (
    "encoding/json"
    "fmt"
    "io/ioutil"
    "net/http"
    "os"

    "github.com/joho/godotenv"
)

type Card struct {
    Name string `json:"name"`
}

type ApiResponse struct {
    Data []Card `json:"data"`
}

func fetchPokemonNames(apiKey string) ([]string, error) {
    url := "https://api.pokemontcg.io/v2/cards"
    req, _ := http.NewRequest("GET", url, nil)
    req.Header.Set("X-Api-Key", apiKey)

    client := &http.Client{}
    resp, err := client.Do(req)
    if err != nil {
        return nil, err
    }
    defer resp.Body.Close()

    if resp.StatusCode != http.StatusOK {
        return nil, fmt.Errorf("received non-200 response code: %d", resp.StatusCode)
    }

    var result ApiResponse
    if err := json.NewDecoder(resp.Body).Decode(&result); err != nil {
        return nil, err
    }

    names := make(map[string]struct{})
    for _, card := range result.Data {
        names[card.Name] = struct{}{}
    }

    uniqueNames := make([]string, 0, len(names))
    for name := range names {
        uniqueNames = append(uniqueNames, name)
    }

    return uniqueNames, nil
}

func writeNamesToFile(names []string, filename string) error {
    data, err := json.MarshalIndent(names, "", "  ")
    if err != nil {
        return err
    }
    return ioutil.WriteFile(filename, data, 0644)
}

func main() {
    // Load environment variables from .env file
    if err := godotenv.Load(); err != nil {
        fmt.Println("Error loading .env file")
        return
    }

    apiKey := os.Getenv("POKEMON_TCG_API_KEY")
    if apiKey == "" {
        fmt.Println("POKEMON_TCG_API_KEY environment variable is not set")
        return
    }

    names, err := fetchPokemonNames(apiKey)
    if err != nil {
        fmt.Printf("Error fetching Pokémon names: %v\n", err)
        return
    }

    filename := "pokemon_names.json"
    if err := writeNamesToFile(names, filename); err != nil {
        fmt.Printf("Error writing names to file: %v\n", err)
        return
    }

    fmt.Printf("Pokémon names have been written to %s\n", filename)
}

func FetchCard(apiKey, cardIdentifier string) (*models.Card, error) {
	log.Printf("FetchCard: Attempting to fetch card with identifier: %s", cardIdentifier)

	// Split the identifier into set and name
	parts := strings.Split(cardIdentifier, "-")
	if len(parts) != 2 {
		return nil, fmt.Errorf("invalid card identifier format")
	}
	set, name := parts[0], parts[1]

	// Construct the search URL
	apiURL := fmt.Sprintf("https://api.pokemontcg.io/v2/cards?q=set.id:%s name:%s", url.QueryEscape(set), url.QueryEscape(name))
	log.Printf("FetchCard: API URL: %s", apiURL)

	req, _ := http.NewRequest("GET", apiURL, nil)
	req.Header.Set("X-Api-Key", apiKey)

	client := &http.Client{}
	resp, err := client.Do(req)
	if err != nil {
		log.Printf("FetchCard: Error making request: %v", err)
		return nil, err
	}
	defer resp.Body.Close()

	if resp.StatusCode != http.StatusOK {
		body, _ := ioutil.ReadAll(resp.Body)
		log.Printf("FetchCard: Received non-200 response code: %d, Body: %s", resp.StatusCode, string(body))
		return nil, fmt.Errorf("received non-200 response code: %d", resp.StatusCode)
	}

	var result struct {
		Data []map[string]interface{} `json:"data"`
	}
	if err := json.NewDecoder(resp.Body).Decode(&result); err != nil {
		return nil, err
	}

	if len(result.Data) == 0 {
		log.Printf("FetchCard: No cards found matching the criteria for identifier: %s", cardIdentifier)
		return nil, fmt.Errorf("no cards found matching the criteria")
	}

	cardData := result.Data[0]
	imageURL := cardData["images"].(map[string]interface{})["large"].(string)

	card := &models.Card{
		ID:      cardData["id"].(string),
		Name:    cardData["name"].(string),
		Edition: cardData["set"].(map[string]interface{})["name"].(string),
		Set:     cardData["set"].(map[string]interface{})["id"].(string),
		Grade:   "N/A", // This is now valid as Grade is an interface{}
		Price:   0.00,  // Price is not provided by the API
		Image:   imageURL,
	}

	log.Printf("FetchCard: Successfully fetched card: %+v", card)

	cardCache.Set(card.ID, card, cache.DefaultExpiration)

	return card, nil
}

